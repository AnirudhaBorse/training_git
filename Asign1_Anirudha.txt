git status command to see what the current state of our project is 

To tell Git to start tracking changes made to octocat.txt, we first need to add it to the staging area by using  git add. 

To store our staged changes we run the commit command with a message describing what we've changed. Let's do that now by typing:

git commit -m "Add cute octocat story" 

 we can add all the new files using a wildcard with git add. 

Fortunately for us, there's git log. Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them. Try running it now:

git log 

The push command tells Git where to put our commits when we're ready, and now we're ready. So let's push our local changes to our origin repo (on GitHub).

The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do 


run git diff with the --staged option to see the changes you just staged. You should see that octodog.txt was created.

You can unstage files by using the git reset command.

Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. 

You can switch branches using the git checkout <branch> command

git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us

switch back to the master branch so you can copy (or merge) your changes from the clean_up branch back into the master branch

merge your changes from the clean_up branch into the master branch

You can use git branch -d <branch name> 

